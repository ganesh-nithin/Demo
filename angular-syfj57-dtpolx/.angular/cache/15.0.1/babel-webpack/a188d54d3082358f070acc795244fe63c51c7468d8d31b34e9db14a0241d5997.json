{"ast":null,"code":"import { BehaviorSubject, Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class CounterService {\n  constructor() {\n    this.count = new BehaviorSubject(23);\n  }\n  static #_ = this.ɵfac = function CounterService_Factory(t) {\n    return new (t || CounterService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CounterService,\n    factory: CounterService.ɵfac,\n    providedIn: \"root\"\n  });\n}\n{\n  cnt = new Observable(observer => {\n    observer.next();\n  });\n}\nincrementCount();\n{\n  this.count.next(this.count.getValue() + 1);\n  console.log(this.count);\n}\ndecrementCount();\n{\n  this.count.next(this.count.getValue() - 1);\n}\ninputValChange(data, number);\n{\n  this.count.next(data);\n}\nresetCount();\n{\n  this.count.next(0);\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAEC,UAAU,QAAQ,MAAM;;AAKlD,OAAM,MAAOC,cAAc;EAH3BC;IAIE,UAAK,GAAG,IAAIH,eAAe,CAAC,EAAE,CAAC;;EAElB;qBAHFE,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAE,SAAdF,cAAc;IAAAG,YAFb;EAAM;;AAKJ;EACZC,GAAG,GAAG,IAAIL,UAAU,CAAEM,QAAQ,IAAI;IAChCA,QAAQ,CAACC,IAAI,EAAE;EACjB,CAAC,CAAC;;AAGJC,cAAc,EAAE;AAAC;EACf,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,IAAI,CAACE,KAAK,CAACC,QAAQ,EAAE,GAAG,CAAC,CAAC;EAC1CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,KAAK,CAAC;;AAGzBI,cAAc,EAAE;AAAC;EACf,IAAI,CAACJ,KAAK,CAACF,IAAI,CAAC,IAAI,CAACE,KAAK,CAACC,QAAQ,EAAE,GAAG,CAAC,CAAC;;AAG5CI,cAAc,CAACC,IAAI,EAAEC,MAAM,CAAC;AAAC;EAC3B,IAAI,CAACP,KAAK,CAACF,IAAI,CAACQ,IAAI,CAAC;;AAGvBE,UAAU,EAAE;AAAC;EACX,IAAI,CAACR,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC","names":["BehaviorSubject","Observable","CounterService","constructor","factory","providedIn","cnt","observer","next","incrementCount","count","getValue","console","log","decrementCount","inputValChange","data","number","resetCount"],"sourceRoot":"","sources":["C:\\Demo\\angular-syfj57-dtpolx\\src\\app\\counter.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CounterService {\n  count = new BehaviorSubject(23);\ncnt:\n  constructor() {\n    cnt = new Observable((observer) => {\n      observer.next();\n    });\n  }\n\n  incrementCount() {\n    this.count.next(this.count.getValue() + 1);\n    console.log(this.count);\n  }\n\n  decrementCount() {\n    this.count.next(this.count.getValue() - 1);\n  }\n\n  inputValChange(data: number) {\n    this.count.next(data);\n  }\n\n  resetCount() {\n    this.count.next(0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}