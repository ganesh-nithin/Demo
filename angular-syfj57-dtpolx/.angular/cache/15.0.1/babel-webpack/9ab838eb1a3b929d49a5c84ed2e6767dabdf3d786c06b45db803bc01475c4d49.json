{"ast":null,"code":"import { increment, decrement, reset } from \"./store/counter.actions\";\nimport { getCounter } from \"./store/counter.selectors\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"./custom-counter-input/custom-counter-input.component\";\nexport class MyCounterComponent {\n  constructor(store) {\n    this.store = store;\n    store.select(getCounter).subscribe(counter => {\n      this.count = counter;\n    });\n  }\n  increment() {\n    this.store.dispatch(increment());\n  }\n  decrement() {\n    this.store.dispatch(decrement());\n  }\n  reset() {\n    this.store.dispatch(reset());\n  }\n  static #_ = this.ɵfac = function MyCounterComponent_Factory(t) {\n    return new (t || MyCounterComponent)(i0.ɵɵdirectiveInject(i1.Store));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: MyCounterComponent,\n    selectors: [[\"app-my-counter\"]],\n    decls: 9,\n    vars: 1,\n    consts: [[\"id\", \"increment\", 3, \"click\"], [\"id\", \"decrement\", 3, \"click\"], [\"id\", \"reset\", 3, \"click\"]],\n    template: function MyCounterComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function MyCounterComponent_Template_button_click_0_listener() {\n          return ctx.increment();\n        });\n        i0.ɵɵtext(1, \"Increment\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function MyCounterComponent_Template_button_click_4_listener() {\n          return ctx.decrement();\n        });\n        i0.ɵɵtext(5, \"Decrement\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function MyCounterComponent_Template_button_click_6_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵtext(7, \"Reset Counter\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"app-custom-counter-input\");\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Current Count: \", ctx.count, \"\");\n      }\n    },\n    dependencies: [i2.CustomCounterInputComponent],\n    encapsulation: 2\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,SAAS,EAAEC,SAAS,EAAEC,KAAK,QAAQ,yBAAyB;AAErE,SAASC,UAAU,QAAQ,2BAA2B;;;;AAMtD,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,KAAuC;IAAvC,UAAK,GAALA,KAAK;IACvBA,KAAK,CAACC,MAAM,CAACJ,UAAU,CAAC,CAACK,SAAS,CAAEC,OAAO,IAAI;MAG7C,IAAI,CAACC,KAAK,GAAGD,OAAO;IACtB,CAAC,CAAC;EACJ;EAEAT,SAAS;IACP,IAAI,CAACM,KAAK,CAACK,QAAQ,CAACX,SAAS,EAAE,CAAC;EAClC;EAEAC,SAAS;IACP,IAAI,CAACK,KAAK,CAACK,QAAQ,CAACV,SAAS,EAAE,CAAC;EAClC;EAEAC,KAAK;IACH,IAAI,CAACI,KAAK,CAACK,QAAQ,CAACT,KAAK,EAAE,CAAC;EAC9B;EAAC;qBArBUE,kBAAkB;EAAA;EAAA;UAAlBA,kBAAkB;IAAAQ;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCV/BC,iCAA6C;QAAtBA;UAAA,OAASC,eAAW;QAAA,EAAC;QAACD,yBAAS;QAAAA,iBAAS;QAE/DA,2BAAK;QAAAA,YAA0B;QAAAA,iBAAM;QAErCA,iCAA6C;QAAtBA;UAAA,OAASC,eAAW;QAAA,EAAC;QAACD,yBAAS;QAAAA,iBAAS;QAE/DA,iCAAqC;QAAlBA;UAAA,OAASC,WAAO;QAAA,EAAC;QAACD,6BAAa;QAAAA,iBAAS;QAC3DA,2CAAqD;;;QALhDA,eAA0B;QAA1BA,uDAA0B","names":["increment","decrement","reset","getCounter","MyCounterComponent","constructor","store","select","subscribe","counter","count","dispatch","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Demo\\angular-syfj57-dtpolx\\src\\app\\my-counter\\my-counter.component.ts","C:\\Demo\\angular-syfj57-dtpolx\\src\\app\\my-counter\\my-counter.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\r\nimport { Store } from \"@ngrx/store\";\r\nimport { increment, decrement, reset } from \"./store/counter.actions\";\r\nimport { counterState } from \"./store/counter.state\";\r\nimport { getCounter } from \"./store/counter.selectors\";\r\n\r\n@Component({\r\n  selector: \"app-my-counter\",\r\n  templateUrl: \"./my-counter.component.html\",\r\n})\r\nexport class MyCounterComponent {\r\n  count: number;\r\n\r\n  constructor(private store: Store<{ counter: counterState }>) {\r\n    store.select(getCounter).subscribe((counter) => {\r\n      \r\n\r\n      this.count = counter;\r\n    });\r\n  }\r\n\r\n  increment() {\r\n    this.store.dispatch(increment());\r\n  }\r\n\r\n  decrement() {\r\n    this.store.dispatch(decrement());\r\n  }\r\n\r\n  reset() {\r\n    this.store.dispatch(reset());\r\n  }\r\n}\r\n\r\n/*\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://github.com/ngrx/platform\r\n*/\r\n","<button id=\"increment\" (click)=\"increment()\">Increment</button>\r\n\r\n<div>Current Count: {{ count }}</div>\r\n\r\n<button id=\"decrement\" (click)=\"decrement()\">Decrement</button>\r\n\r\n<button id=\"reset\" (click)=\"reset()\">Reset Counter</button>\r\n<app-custom-counter-input></app-custom-counter-input>\r\n<!-- \r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://github.com/ngrx/platform\r\n-->\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}