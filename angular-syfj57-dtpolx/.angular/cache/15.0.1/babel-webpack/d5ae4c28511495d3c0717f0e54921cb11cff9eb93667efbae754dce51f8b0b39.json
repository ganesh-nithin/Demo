{"ast":null,"code":"import { BehaviorSubject, Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class CounterService {\n  constructor() {\n    this.num = 0;\n    this.count = new BehaviorSubject(23);\n    this.cnt = new Observable(observer => {\n      observer.next(this.num);\n    });\n  }\n  incrementCount() {\n    this.count.next(this.count.getValue() + 1);\n    this.cnt = new Observable(observer => {\n      this.num++;\n      console.log(this.nu);\n      observer.next(this.num);\n    });\n  }\n  decrementCount() {\n    this.count.next(this.count.getValue() - 1);\n  }\n  inputValChange(data) {\n    this.count.next(data);\n  }\n  resetCount() {\n    this.count.next(0);\n  }\n  static #_ = this.ɵfac = function CounterService_Factory(t) {\n    return new (t || CounterService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CounterService,\n    factory: CounterService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAEC,UAAU,QAAQ,MAAM;;AAKlD,OAAM,MAAOC,cAAc;EAIzBC;IAHA,QAAG,GAAW,CAAC;IACf,UAAK,GAAG,IAAIH,eAAe,CAAC,EAAE,CAAC;IAG7B,IAAI,CAACI,GAAG,GAAG,IAAIH,UAAU,CAAEI,QAAQ,IAAI;MACrCA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACC,GAAG,CAAC;IACzB,CAAC,CAAC;EACJ;EAEAC,cAAc;IACZ,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,IAAI,CAACG,KAAK,CAACC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAE1C,IAAI,CAACN,GAAG,GAAG,IAAIH,UAAU,CAAEI,QAAQ,IAAI;MACrC,IAAI,CAACE,GAAG,EAAE;MACVI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,EAAE,CAAC;MAEpBR,QAAQ,CAACC,IAAI,CAAC,IAAI,CAACC,GAAG,CAAC;IACzB,CAAC,CAAC;EACJ;EAEAO,cAAc;IACZ,IAAI,CAACL,KAAK,CAACH,IAAI,CAAC,IAAI,CAACG,KAAK,CAACC,QAAQ,EAAE,GAAG,CAAC,CAAC;EAC5C;EAEAK,cAAc,CAACC,IAAY;IACzB,IAAI,CAACP,KAAK,CAACH,IAAI,CAACU,IAAI,CAAC;EACvB;EAEAC,UAAU;IACR,IAAI,CAACR,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC;EACpB;EAAC;qBA/BUJ,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAgB,SAAdhB,cAAc;IAAAiB,YAFb;EAAM","names":["BehaviorSubject","Observable","CounterService","constructor","cnt","observer","next","num","incrementCount","count","getValue","console","log","nu","decrementCount","inputValChange","data","resetCount","factory","providedIn"],"sourceRoot":"","sources":["C:\\Demo\\angular-syfj57-dtpolx\\src\\app\\counter.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CounterService {\n  num: number = 0;\n  count = new BehaviorSubject(23);\n  cnt: Observable<number>;\n  constructor() {\n    this.cnt = new Observable((observer) => {\n      observer.next(this.num);\n    });\n  }\n\n  incrementCount() {\n    this.count.next(this.count.getValue() + 1);\n\n    this.cnt = new Observable((observer) => {\n      this.num++;\n      console.log(this.nu);\n      \n      observer.next(this.num);\n    });\n  }\n\n  decrementCount() {\n    this.count.next(this.count.getValue() - 1);\n  }\n\n  inputValChange(data: number) {\n    this.count.next(data);\n  }\n\n  resetCount() {\n    this.count.next(0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}