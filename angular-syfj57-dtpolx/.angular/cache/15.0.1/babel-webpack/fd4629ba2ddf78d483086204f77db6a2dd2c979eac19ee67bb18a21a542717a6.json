{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class CounterService {\n  constructor() {\n    this.count = new Subject();\n  }\n  incrementCount() {\n    this.count.next(this.count);\n    console.log(this.count);\n  }\n  decrementCount() {\n    this.count.next(this.count.getValue() - 1);\n    // this.count--;\n  }\n\n  inputValChange(data) {\n    console.log(\"change\", data);\n    this.count.next(data);\n    // this.count = data;\n  }\n\n  resetCount() {\n    this.count.next(0);\n    // this.count = 0;\n  }\n  static #_ = this.ɵfac = function CounterService_Factory(t) {\n    return new (t || CounterService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CounterService,\n    factory: CounterService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAoB,MAAM;;AAK1C,OAAM,MAAOC,cAAc;EAEzBC;IADA,UAAK,GAAE,IAAIF,OAAO,EAAE;EACL;EAEfG,cAAc;IACZ,IAAI,CAACC,KAAK,CAACC,IAAI,CAAC,IAAI,CAACD,KAAK,CAAC;IAC3BE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,KAAK,CAAC;EACzB;EAEAI,cAAc;IACZ,IAAI,CAACJ,KAAK,CAACC,IAAI,CAAC,IAAI,CAACD,KAAK,CAACK,QAAQ,EAAE,GAAC,CAAC,CAAC;IACxC;EACF;;EAEAC,cAAc,CAACC,IAAY;IACzBL,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACI,IAAI,CAAC;IAE1B,IAAI,CAACP,KAAK,CAACC,IAAI,CAACM,IAAI,CAAC;IACrB;EACF;;EAEAC,UAAU;IACR,IAAI,CAACR,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;IAClB;EACF;EAAC;qBAxBUJ,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAY,SAAdZ,cAAc;IAAAa,YAFb;EAAM","names":["Subject","CounterService","constructor","incrementCount","count","next","console","log","decrementCount","getValue","inputValChange","data","resetCount","factory","providedIn"],"sourceRoot":"","sources":["C:\\Demo\\angular-syfj57-dtpolx\\src\\app\\counter.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { Subject, Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CounterService {\n  count= new Subject();\n  constructor() {}\n\n  incrementCount() {\n    this.count.next(this.count);\n    console.log(this.count);\n  }\n\n  decrementCount() {\n    this.count.next(this.count.getValue()-1);\n    // this.count--;\n  }\n\n  inputValChange(data: number) {\n    console.log(\"change\",data);\n    \n    this.count.next(data);\n    // this.count = data;\n  }\n\n  resetCount() {\n    this.count.next(0);\n    // this.count = 0;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}