{"ast":null,"code":"import { createReducer, on } from \"@ngrx/store\";\nimport { customIncrement, decrement, increment, reset } from \"./counter.actions\";\nimport { initialState } from \"./counter.state\";\nconst _counterReducer = createReducer(initialState, on(increment, state => {\n  return {\n    ...state,\n    counter: state.counter + 1\n  };\n}), on(decrement, state => {\n  return {\n    ...state,\n    counter: state.counter - 1\n  };\n}), on(reset, state => {\n  return {\n    ...state,\n    counter: 0\n  };\n}), on(customIncrement, (state, action) => {\n  return {\n    ...state,\n    counter: state.counter + action.value\n  };\n}), on());\nexport function counterReducer(state, action) {\n  return _counterReducer(state, action);\n}","map":{"version":3,"mappings":"AAAA,SAAiBA,aAAa,EAAEC,EAAE,QAAQ,aAAa;AACvD,SACEC,eAAe,EACfC,SAAS,EACTC,SAAS,EACTC,KAAK,QACA,mBAAmB;AAC1B,SAAuBC,YAAY,QAAQ,iBAAiB;AAE5D,MAAMC,eAAe,GAAGP,aAAa,CACnCM,YAAY,EACZL,EAAE,CAACG,SAAS,EAAGI,KAAK,IAAI;EACtB,OAAO;IAAE,GAAGA,KAAK;IAAEC,OAAO,EAAED,KAAK,CAACC,OAAO,GAAG;EAAC,CAAE;AACjD,CAAC,CAAC,EACFR,EAAE,CAACE,SAAS,EAAGK,KAAK,IAAI;EACtB,OAAO;IAAE,GAAGA,KAAK;IAAEC,OAAO,EAAED,KAAK,CAACC,OAAO,GAAG;EAAC,CAAE;AACjD,CAAC,CAAC,EACFR,EAAE,CAACI,KAAK,EAAGG,KAAK,IAAI;EAClB,OAAO;IAAE,GAAGA,KAAK;IAAEC,OAAO,EAAE;EAAC,CAAE;AACjC,CAAC,CAAC,EACFR,EAAE,CAACC,eAAe,EAAE,CAACM,KAAK,EAAEE,MAAM,KAAI;EACpC,OAAO;IACL,GAAGF,KAAK;IACRC,OAAO,EAAED,KAAK,CAACC,OAAO,GAAGC,MAAM,CAACC;GACjC;AACH,CAAC,CAAC,EAACV,EAAE,EAAE,CACR;AAED,OAAM,SAAUW,cAAc,CAACJ,KAAmB,EAAEE,MAAc;EAChE,OAAOH,eAAe,CAACC,KAAK,EAAEE,MAAM,CAAC;AACvC","names":["createReducer","on","customIncrement","decrement","increment","reset","initialState","_counterReducer","state","counter","action","value","counterReducer"],"sourceRoot":"","sources":["C:\\Demo\\angular-syfj57-dtpolx\\src\\app\\my-counter\\store\\counter.reducer.ts"],"sourcesContent":["import { Action, createReducer, on } from \"@ngrx/store\";\r\nimport {\r\n  customIncrement,\r\n  decrement,\r\n  increment,\r\n  reset,\r\n} from \"./counter.actions\";\r\nimport { counterState, initialState } from \"./counter.state\";\r\n\r\nconst _counterReducer = createReducer(\r\n  initialState,\r\n  on(increment, (state) => {\r\n    return { ...state, counter: state.counter + 1 };\r\n  }),\r\n  on(decrement, (state) => {\r\n    return { ...state, counter: state.counter - 1 };\r\n  }),\r\n  on(reset, (state) => {\r\n    return { ...state, counter: 0 };\r\n  }),\r\n  on(customIncrement, (state, action) => {\r\n    return {\r\n      ...state,\r\n      counter: state.counter + action.value,\r\n    };\r\n  }),on()\r\n);\r\n\r\nexport function counterReducer(state: counterState, action: Action) {\r\n  return _counterReducer(state, action);\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}