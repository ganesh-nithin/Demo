{"ast":null,"code":"import { BehaviorSubject, Observable } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class CounterService {\n  constructor() {\n    this.count = new BehaviorSubject(23);\n    cnt = new Observable(observer => {\n      observer.next();\n    });\n  }\n  incrementCount() {\n    this.count.next(this.count.getValue() + 1);\n    console.log(this.count);\n  }\n  decrementCount() {\n    this.count.next(this.count.getValue() - 1);\n  }\n  inputValChange(data) {\n    this.count.next(data);\n  }\n  resetCount() {\n    this.count.next(0);\n  }\n  static #_ = this.ɵfac = function CounterService_Factory(t) {\n    return new (t || CounterService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CounterService,\n    factory: CounterService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,eAAe,EAAEC,UAAU,QAAQ,MAAM;;AAKlD,OAAM,MAAOC,cAAc;EAGzBC;IAFA,UAAK,GAAG,IAAIH,eAAe,CAAC,EAAE,CAAC;IAG7BI,GAAG,GAAG,IAAIH,UAAU,CAAEI,QAAQ,IAAI;MAChCA,QAAQ,CAACC,IAAI,EAAE;IACjB,CAAC,CAAC;EACJ;EAEAC,cAAc;IACZ,IAAI,CAACC,KAAK,CAACF,IAAI,CAAC,IAAI,CAACE,KAAK,CAACC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,KAAK,CAAC;EACzB;EAEAI,cAAc;IACZ,IAAI,CAACJ,KAAK,CAACF,IAAI,CAAC,IAAI,CAACE,KAAK,CAACC,QAAQ,EAAE,GAAG,CAAC,CAAC;EAC5C;EAEAI,cAAc,CAACC,IAAY;IACzB,IAAI,CAACN,KAAK,CAACF,IAAI,CAACQ,IAAI,CAAC;EACvB;EAEAC,UAAU;IACR,IAAI,CAACP,KAAK,CAACF,IAAI,CAAC,CAAC,CAAC;EACpB;EAAC;qBAxBUJ,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAc,SAAdd,cAAc;IAAAe,YAFb;EAAM","names":["BehaviorSubject","Observable","CounterService","constructor","cnt","observer","next","incrementCount","count","getValue","console","log","decrementCount","inputValChange","data","resetCount","factory","providedIn"],"sourceRoot":"","sources":["C:\\Demo\\angular-syfj57-dtpolx\\src\\app\\counter.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { BehaviorSubject, Observable } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class CounterService {\n  count = new BehaviorSubject(23);\n\n  constructor() {\n    cnt = new Observable((observer) => {\n      observer.next();\n    });\n  }\n\n  incrementCount() {\n    this.count.next(this.count.getValue() + 1);\n    console.log(this.count);\n  }\n\n  decrementCount() {\n    this.count.next(this.count.getValue() - 1);\n  }\n\n  inputValChange(data: number) {\n    this.count.next(data);\n  }\n\n  resetCount() {\n    this.count.next(0);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}