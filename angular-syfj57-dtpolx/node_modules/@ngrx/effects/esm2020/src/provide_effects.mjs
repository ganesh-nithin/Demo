import { ENVIRONMENT_INITIALIZER, inject, makeEnvironmentProviders, } from '@angular/core';
import { FEATURE_STATE_PROVIDER, ROOT_STORE_PROVIDER, Store, } from '@ngrx/store';
import { EffectsRunner } from './effects_runner';
import { EffectSources } from './effect_sources';
import { rootEffectsInit as effectsInit } from './effects_actions';
/**
 * @usageNotes
 *
 * ### Providing effects at the root level
 *
 * ```ts
 * bootstrapApplication(AppComponent, {
 *   providers: [provideEffects(RouterEffects)],
 * });
 * ```
 *
 * ### Providing effects at the feature level
 *
 * ```ts
 * const booksRoutes: Route[] = [
 *   {
 *     path: '',
 *     providers: [provideEffects(BooksApiEffects)],
 *     children: [
 *       { path: '', component: BookListComponent },
 *       { path: ':id', component: BookDetailsComponent },
 *     ],
 *   },
 * ];
 * ```
 */
export function provideEffects(...effects) {
    const effectsFlattened = effects.flat();
    return makeEnvironmentProviders([
        effectsFlattened,
        {
            provide: ENVIRONMENT_INITIALIZER,
            multi: true,
            useValue: () => {
                inject(ROOT_STORE_PROVIDER);
                inject(FEATURE_STATE_PROVIDER, { optional: true });
                const effectsRunner = inject(EffectsRunner);
                const effectSources = inject(EffectSources);
                const shouldInitEffects = !effectsRunner.isStarted;
                if (shouldInitEffects) {
                    effectsRunner.start();
                }
                for (const effectsClass of effectsFlattened) {
                    const effectsInstance = inject(effectsClass);
                    effectSources.addEffects(effectsInstance);
                }
                if (shouldInitEffects) {
                    const store = inject(Store);
                    store.dispatch(effectsInit());
                }
            },
        },
    ]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZV9lZmZlY3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9lZmZlY3RzL3NyYy9wcm92aWRlX2VmZmVjdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUV2QixNQUFNLEVBQ04sd0JBQXdCLEdBRXpCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsbUJBQW1CLEVBQ25CLEtBQUssR0FDTixNQUFNLGFBQWEsQ0FBQztBQUNyQixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLElBQUksV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFjbkU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F5Qkc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUM1QixHQUFHLE9BQTRDO0lBRS9DLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3hDLE9BQU8sd0JBQXdCLENBQUM7UUFDOUIsZ0JBQWdCO1FBQ2hCO1lBQ0UsT0FBTyxFQUFFLHVCQUF1QjtZQUNoQyxLQUFLLEVBQUUsSUFBSTtZQUNYLFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ2IsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7Z0JBQzVCLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUVuRCxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQzVDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDNUMsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7Z0JBRW5ELElBQUksaUJBQWlCLEVBQUU7b0JBQ3JCLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDdkI7Z0JBRUQsS0FBSyxNQUFNLFlBQVksSUFBSSxnQkFBZ0IsRUFBRTtvQkFDM0MsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUM3QyxhQUFhLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2lCQUMzQztnQkFFRCxJQUFJLGlCQUFpQixFQUFFO29CQUNyQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQzVCLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztpQkFDL0I7WUFDSCxDQUFDO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gIEVudmlyb25tZW50UHJvdmlkZXJzLFxuICBpbmplY3QsXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyxcbiAgVHlwZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBGRUFUVVJFX1NUQVRFX1BST1ZJREVSLFxuICBST09UX1NUT1JFX1BST1ZJREVSLFxuICBTdG9yZSxcbn0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgRWZmZWN0c1J1bm5lciB9IGZyb20gJy4vZWZmZWN0c19ydW5uZXInO1xuaW1wb3J0IHsgRWZmZWN0U291cmNlcyB9IGZyb20gJy4vZWZmZWN0X3NvdXJjZXMnO1xuaW1wb3J0IHsgcm9vdEVmZmVjdHNJbml0IGFzIGVmZmVjdHNJbml0IH0gZnJvbSAnLi9lZmZlY3RzX2FjdGlvbnMnO1xuXG4vKipcbiAqIFJ1bnMgdGhlIHByb3ZpZGVkIGVmZmVjdHMuXG4gKiBDYW4gYmUgY2FsbGVkIGF0IHRoZSByb290IGFuZCBmZWF0dXJlIGxldmVscy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVFZmZlY3RzKGVmZmVjdHM6IFR5cGU8dW5rbm93bj5bXSk6IEVudmlyb25tZW50UHJvdmlkZXJzO1xuLyoqXG4gKiBSdW5zIHRoZSBwcm92aWRlZCBlZmZlY3RzLlxuICogQ2FuIGJlIGNhbGxlZCBhdCB0aGUgcm9vdCBhbmQgZmVhdHVyZSBsZXZlbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlRWZmZWN0cyhcbiAgLi4uZWZmZWN0czogVHlwZTx1bmtub3duPltdXG4pOiBFbnZpcm9ubWVudFByb3ZpZGVycztcbi8qKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAjIyMgUHJvdmlkaW5nIGVmZmVjdHMgYXQgdGhlIHJvb3QgbGV2ZWxcbiAqXG4gKiBgYGB0c1xuICogYm9vdHN0cmFwQXBwbGljYXRpb24oQXBwQ29tcG9uZW50LCB7XG4gKiAgIHByb3ZpZGVyczogW3Byb3ZpZGVFZmZlY3RzKFJvdXRlckVmZmVjdHMpXSxcbiAqIH0pO1xuICogYGBgXG4gKlxuICogIyMjIFByb3ZpZGluZyBlZmZlY3RzIGF0IHRoZSBmZWF0dXJlIGxldmVsXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGJvb2tzUm91dGVzOiBSb3V0ZVtdID0gW1xuICogICB7XG4gKiAgICAgcGF0aDogJycsXG4gKiAgICAgcHJvdmlkZXJzOiBbcHJvdmlkZUVmZmVjdHMoQm9va3NBcGlFZmZlY3RzKV0sXG4gKiAgICAgY2hpbGRyZW46IFtcbiAqICAgICAgIHsgcGF0aDogJycsIGNvbXBvbmVudDogQm9va0xpc3RDb21wb25lbnQgfSxcbiAqICAgICAgIHsgcGF0aDogJzppZCcsIGNvbXBvbmVudDogQm9va0RldGFpbHNDb21wb25lbnQgfSxcbiAqICAgICBdLFxuICogICB9LFxuICogXTtcbiAqIGBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUVmZmVjdHMoXG4gIC4uLmVmZmVjdHM6IFR5cGU8dW5rbm93bj5bXSB8IFR5cGU8dW5rbm93bj5bXVtdXG4pOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG4gIGNvbnN0IGVmZmVjdHNGbGF0dGVuZWQgPSBlZmZlY3RzLmZsYXQoKTtcbiAgcmV0dXJuIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVycyhbXG4gICAgZWZmZWN0c0ZsYXR0ZW5lZCxcbiAgICB7XG4gICAgICBwcm92aWRlOiBFTlZJUk9OTUVOVF9JTklUSUFMSVpFUixcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgICAgdXNlVmFsdWU6ICgpID0+IHtcbiAgICAgICAgaW5qZWN0KFJPT1RfU1RPUkVfUFJPVklERVIpO1xuICAgICAgICBpbmplY3QoRkVBVFVSRV9TVEFURV9QUk9WSURFUiwgeyBvcHRpb25hbDogdHJ1ZSB9KTtcblxuICAgICAgICBjb25zdCBlZmZlY3RzUnVubmVyID0gaW5qZWN0KEVmZmVjdHNSdW5uZXIpO1xuICAgICAgICBjb25zdCBlZmZlY3RTb3VyY2VzID0gaW5qZWN0KEVmZmVjdFNvdXJjZXMpO1xuICAgICAgICBjb25zdCBzaG91bGRJbml0RWZmZWN0cyA9ICFlZmZlY3RzUnVubmVyLmlzU3RhcnRlZDtcblxuICAgICAgICBpZiAoc2hvdWxkSW5pdEVmZmVjdHMpIHtcbiAgICAgICAgICBlZmZlY3RzUnVubmVyLnN0YXJ0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGVmZmVjdHNDbGFzcyBvZiBlZmZlY3RzRmxhdHRlbmVkKSB7XG4gICAgICAgICAgY29uc3QgZWZmZWN0c0luc3RhbmNlID0gaW5qZWN0KGVmZmVjdHNDbGFzcyk7XG4gICAgICAgICAgZWZmZWN0U291cmNlcy5hZGRFZmZlY3RzKGVmZmVjdHNJbnN0YW5jZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hvdWxkSW5pdEVmZmVjdHMpIHtcbiAgICAgICAgICBjb25zdCBzdG9yZSA9IGluamVjdChTdG9yZSk7XG4gICAgICAgICAgc3RvcmUuZGlzcGF0Y2goZWZmZWN0c0luaXQoKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgXSk7XG59XG4iXX0=